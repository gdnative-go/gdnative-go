# GDNative-Go Gitlab CI Pipelines
image: golang:1.15-buster

variables:
  TAG: $CI_BUILD_REF_NAME

# release references
.release_refs: &release_refs
  - "/^master$"
  - "tags"

# Go Mod caching
.go-cache:
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
  before_script:
    - mkdir -p .go
  cache:
    paths:
      - .go/pkg/mod

stages:
  - commits_check
  - generation
  - linting
  - build
  - version

# ---------------- commits check ----------------
commit_messages_check:
  stage: commits_check
  image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
  script:
    - release test-git
  allow_failure: false
  except:
    *release_refs

# ---------------- bindings generation ----------------
go_bindings_generation:
  extends: .go-cache
  stage: generation
  script:
    - go get -u github.com/sqs/goreturns
    - go run build/mage.go generate
  allow_failure: false
  except:
    - tags

# ---------------- code checks ----------------
code_linting:
  extends: .go-cache
  stage: linting
  script:
    - golangci-lint run -v --timeout 5m
  allow_failure: false
  except:
    - tags

code_formatting:
  extends: .go-cache
  stage: linting
  script:
    - go get -u github.com/sqs/goreturns
    - if [[ $(goreturns -d .) -eq "" ]]; then echo "goreturns check success"; exit 0; fi
    - echo "ERROR - goreturn check failed"
    - goreturns -d .
    - exit 1
  allow_failure: false
  except:
    - tags

# ---------------- build ----------------
build_library:
  extends: .go-cache
  stage: build
  script:
    - go run build/mage.go build
  allow_failure: false
  except:
    - tags

# ---------------- update version ----------------
version_update:
  stage: version
  image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
  script:
    - release changelog
    - release commit-and-tag --create-tag-pipeline CHANGELOG.md
  allow_failure: true
  when: on_success
  only:
    - master
